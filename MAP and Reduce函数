Map()函数接收2个参数，一个是函数，一个是Iterable, map将传入的函数一次作用到序列的每个元素，并把结果作为新的Iterable 返回。

我们有一个函数，f(x) = x2，要把这个函数作用在list[1,2,3,4,5,6,7,8,9]上，可以用map()实现：
Def f(x):
 return x * x

r=map(f,[1,2,3,4,5,6,7,8,9])
print(list(r))


Map()传入的第一个参数是f()函数，结果r是一个Iterator，iterator是一个惰性序列，因此通过list（）函数让他把整个序列都计算出来并返回一个list

如果不用map()函数，也可以写一个循环，计算出结果。
L=[]
fornin[1,2,3,4,5,6,7,8,9]:
L.append(f(n))

print(L)


Reduce是吧一个函数作用在一个序列[x1,x2,x3,…..]，整个函数必须接受2个参数，reduce把结果继续和序列的下一个元素做累积计算，计算的效果是：
fromfunctoolsimportreduce
defadd(x,y):
returnx+y

print(reduce(add,[1,3,5,7,9]))

不用reduce函数的话，也可以用sum()函数去实现
data=sum([1,3,5,7,9])
print(data)

#fortocalculateSum
L=[1,3,5,7,9]
sum=0
forninL:
sum=sum+n
print(sum)

如果想要把序列[1,3,5,7,9]变成 13579的话那么reduce就可以派上用场：
#turnlist[1,3,5,7,9]to13579
deffn(x,y):
returnx*10+y

print(reduce(fn,(1,3,5,7,9)))

以上的例子并没有什么卵用，但是，如果考虑到字符str也是一个序列，对上面的例子稍做改动，配合map()，就可以吧str转换为int

