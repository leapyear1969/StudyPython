高阶函数叫做 Higher order function。
>>>Abs(-10)
10

>>>abs
<built-in function abs>

可见 abs(-10)是函数调用，而abs是函数本身，要想获得调用结果，可以直接把结果赋值给变量

>>>X = abs(-10)
>>>x
10

但是，如果把函数本身赋值给变量呢？
>>> f = abs
>>> f 
<built-in function abs>

函数本身也可以赋值给变量，即：变量指向函数。

>>>f = abs
>>> f(-10)
10


函数名也是变量：

>>>abs = 10
>>>abs(-10)

此时的abs已经指向了int 10，所以abs这个变量已经不是函数了。实际写代码也没有瓜皮这么写。

传入函数：
既然变量可以指向函数，函数的参数能够接受另外一个函数作为参数，这种函数就称之为高阶函数。

A sample:
Def add(x,y,f)
	Return f(x) + f(y)
	
X = -5 
Y = 6
F =abs
Add (x,y,f)

Return 11




add code resource:

#高阶函数
x = abs(-10)
print(x)

f = abs
print(f(-10))

abs = 10
#print(abs(-10))

def f(x):
    return x * x

r = map(f, [1,2,3,4,5,6,7,8,9])
print(list(r))


L = []
for n in [1,2,3,4,5,6,7,8,9]:
    L.append(f(n))

print(L)

from functools import reduce
def add(x,y):
    return x + y

print(reduce(add,[1,3,5,7,9]))


data = sum([1,3,5,7,9])
print(data)
#for to calculate Sum
L = [1,3,5,7,9]
sum = 0
for n in L:
    sum = sum + n
print(sum)

#turn list[1,3,5,7,9] to 13579
def fn(x,y):
    return x * 10 + y

print(reduce(fn,(1,3,5,7,9)))


#add#高阶函数
from functools import reduce
def fn(x, y):
    return x * 10 + y

def char2nm(s):
    digits = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}
    return digits[s]

print(list(map(char2nm,'13579')))
print(reduce(fn,map(char2nm,'13579')))




