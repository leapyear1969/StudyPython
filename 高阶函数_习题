#高阶函数
#利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：['adam', 'LISA', 'barT']，输出：['Adam', 'Lisa', 'Bart']：
L = ['adam','LISA','barT']

def normalize(name):
    name = name[0].upper() + name[1:].lower()
    return name

print(list(map(normalize,L)))

#请编写一个prod()函数，可以接受一个list并利用reduce()求积：
from functools import reduce
L = [1,2,3,4,5]

def fn(x,y):
    return x * y

def prod(L):
    return reduce(fn,L)
print(prod(L))


#利用map和reduce编写一个str2float函数，把字符串'123.456'转换成浮点数123.456：
from functools import reduce
str = '123.456'
def str2float(s):
        def fn(x,y):
            return x*10 + y
        n = s.index('.')
        s1 = list(map(int,[x for x in s[:n]]))
        s2 = list(map(int,[x for x in s[n+1:]]))
        return reduce(fn,s1) + reduce(fn,s2)/10**len(s2)
print('\'123.456\'=',str2float(str))

# 这个答案非原创，也是某位前辈写的。
# 1行，从 functools 包里调用 reduce
# 3-4行，定义一个 fn() 函数，用来把S1，S2这两个list里面的元素变成一个数。
# 5行，很关键的一步，利用 index() 函数确定字符串 S 中 ‘.’的位置。
# 6-7行，先利用切片把我们传入的 str 分成以前以后两个部分（其实就是根据小数点分成整数和浮点数，分别处理），然后再把切割好的 str 利用 int 变成整数，map() 函数负责把 int 作用到截取的 str 的每个元素中去。
# 8行，就说一个知识点，其他的都很好理解，m**n 这个表达的就是 m 的 n 次方。


review code example. 2019/03/08
